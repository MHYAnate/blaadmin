this is the flow for create a manufacturere and it works 


const adminCreateManufacturerHandler = async (req, res) => {
  const { 
      name, 
      country, 
      logo, 
      email, 
      phone, 
      contactPerson 
  } = req.body;

  // Validate required fields
  if (!name || !country || !logo || !email || !contactPerson) {
      return res.status(400).json({ 
          error: 'Missing required fields: name, country, logo, email, and contactPerson are required' 
      });
  }

  // Validate email format
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
      return res.status(400).json({ error: 'Invalid email format' });
  }

  try {
      // Check if manufacturer with same name or email already exists
      const existingManufacturer = await prisma.manufacturer.findFirst({
          where: {
              OR: [
                  { name },
                  { email }
              ]
          }
      });

      if (existingManufacturer) {
          const conflictField = existingManufacturer.name === name ? 'name' : 'email';
          return res.status(409).json({ 
              error: `Manufacturer with this ${conflictField} already exists` 
          });
      }

      // Create the manufacturer
      const manufacturer = await prisma.manufacturer.create({
          data: {
              name,
              country,
              logo,
              email,
              phone: phone || null, // Handle optional field
              contactPerson,
              status: false // Default status
          },
          select: { // Only return specific fields in response
              id: true,
              name: true,
              country: true,
              email: true,
              status: true,
              createdAt: true
          }
      });

      return res.status(201).json({
          success: true,
          message: 'Manufacturer created successfully',
          data: manufacturer
      });

  } catch (error) {
      console.error('Error creating manufacturer:', error);
      
      // Handle Prisma specific errors
      if (error.code === 'P2002') {
          return res.status(400).json({ 
              error: 'Unique constraint violation - manufacturer with this name or email already exists' 
          });
      }

      return res.status(500).json({ 
          error: 'Internal server error',
          details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
  }
};


export const useCreateManufacturer = (onSuccessCallback) => {
  const queryClient = useQueryClient();

  const {
    mutateAsync,
    isPending: createManufacturerIsLoading,
    error,
  } = useMutation({
    mutationFn: (payload) =>
      apiClient.post(routes.createManufacturer(), payload),

    onSuccess: (response) => {
      // Invalidate and refetch the manufacturers list to show the new entry
      queryClient.invalidateQueries({ queryKey: ["fetchManufacturers"] });
      
      toast.success(response?.data?.message || "Manufacturer created successfully!");
      
      if (onSuccessCallback) {
        onSuccessCallback();
      }
    },
    onError: (error) => {
      // The error message is handled globally by the component's try-catch block
      // but you can still toast a generic error here if you want.
      const errorMessage = ErrorHandler(error) || "Creation failed. Please try again.";
      toast.error(errorMessage);
    },
  });

  return {
    createManufacturerPayload: mutateAsync,
    createManufacturerIsLoading,
    createManufacturerError: ErrorHandler(error),
  };
};

"use client";

import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { useCallback, useState } from "react";
import Image from "next/image";
import { useDropzone } from "react-dropzone";
import { UploadIcon } from "../../../../../public/icons";
import { CountryDropdown } from "@/components/ui/country-dropdown";
import { useCreateManufacturer } from "@/services/manufacturers";
import { toast } from "sonner";
import { apiClient } from "./apiClient"; // Import your API client

// Zod schema for form validation
const formSchema = z.object({
  name: z.string().min(3, "Name must be at least 3 characters long."),
  contactPerson: z.string().min(3, "Contact person name is required."),
  email: z.string().email("Please enter a valid email address."),
  phone: z.string().optional(),
  country: z.string().min(1, "Country is required."),
  logo: z
    .instanceof(File, { message: "A logo image is required." })
    .refine((file) => file.size > 0, "A logo image is required."),
});

type FormSchemaType = z.infer<typeof formSchema>;

interface IProps {
  setClose: () => void;
}

const AddManufacturer: React.FC<IProps> = ({ setClose }) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [preview, setPreview] = useState<string | null>(null);

  const { createManufacturerPayload, createManufacturerIsLoading } = useCreateManufacturer(setClose);

  const form = useForm<FormSchemaType>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      contactPerson: "",
      email: "",
      phone: "",
      country: "",
      logo: undefined,
    },
  });

  // NEW: Upload image using backend endpoint
  const uploadImageToBackend = async (file: File): Promise<string> => {
    const formData = new FormData();
    formData.append("images", file); // Field name must be "images"
    formData.append("folder", "manufacturers"); // Optional folder parameter

    try {
      const response = await apiClient.post("/upload", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      if (response.data.urls && response.data.urls.length > 0) {
        return response.data.urls[0]; // Return the first URL
      }
      
      throw new Error("No URL returned from server");
    } catch (error: any) {
      console.error("Backend upload failed:", error);
      const errorMessage = error.response?.data?.error || error.message || "Image upload failed";
      toast.error(errorMessage);
      throw error;
    }
  };

  const onDrop = useCallback(
    (acceptedFiles: File[]) => {
      const file = acceptedFiles[0];
      if (file) {
        setPreview(URL.createObjectURL(file));
        form.setValue("logo", file, { shouldValidate: true });
      }
    },
    [form]
  );

  const { getRootProps, getInputProps, isDragActive, fileRejections } = useDropzone({
    onDrop,
    maxFiles: 1,
    maxSize: 5000000, // 5MB
    accept: { "image/png": [".png"], "image/jpeg": [".jpg", ".jpeg"] },
  });
  
  async function onSubmit(values: FormSchemaType) {
    setIsSubmitting(true);

    try {
        // NEW: Upload via backend endpoint
        toast.info("Uploading logo...");
        const logoUrl = await uploadImageToBackend(values.logo);
        toast.success("Logo uploaded!");

        // Prepare the final payload
        const payload = {
          name: values.name,
          contactPerson: values.contactPerson,
          email: values.email,
          country: values.country,
          logo: logoUrl,
          phone: values.phone || undefined,
        };

        // Create manufacturer
        await createManufacturerPayload(payload as any);

    } catch (error: any) {
        console.error("Creation failed:", error);
        const errorMessage = error?.response?.data?.error || error.message || "An unexpected error occurred.";
        
        if (errorMessage.includes("name")) {
            form.setError("name", { type: "manual", message: errorMessage });
        } else if (errorMessage.includes("email")) {
            form.setError("email", { type: "manual", message: errorMessage });
        } else {
            toast.error(errorMessage);
        }
    } finally {
        setIsSubmitting(false);
    }
  }

  const isLoading = isSubmitting || createManufacturerIsLoading;

  return (
    <div>
        <Form {...form}>
         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
           {/* Form Fields... */}
           <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
             <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Manufacturer Name</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Acme Inc." {...field} disabled={isLoading} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          <FormField
              control={form.control}
              name="contactPerson"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Contact Person</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Jane Doe" {...field} disabled={createManufacturerIsLoading} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email Address</FormLabel>
                  <FormControl>
                    <Input type="email" placeholder="contact@acme.com" {...field} disabled={createManufacturerIsLoading} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Phone Number (Optional)</FormLabel>
                  <FormControl>
                    <Input placeholder="+1 555-123-4567" {...field} disabled={createManufacturerIsLoading} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <FormField
            control={form.control}
            name="country"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Country</FormLabel>
                <CountryDropdown
                  placeholder="-- Select a country --"
                  defaultValue={field.value}
                  onChange={(country) => field.onChange(country.name)}
                  disabled={createManufacturerIsLoading}
                />
                <FormMessage />
              </FormItem>
            )}
          />
            {/* ... other fields like contactPerson, email, phone, country */}
          {/* </div> */}

          {/* Logo Upload Field */}
          <FormField
            control={form.control}
            name="logo"
            render={() => (
              <FormItem>
                <FormLabel>Manufacturer Logo</FormLabel>
                <FormControl>
                  <div
                    {...getRootProps()}
                    className={`flex flex-col items-center justify-center p-6 border-2 border-dashed rounded-lg cursor-pointer transition-colors ${
                      isDragActive ? 'border-primary bg-primary/10' : 'border-gray-300'
                    } ${isLoading ? 'cursor-not-allowed opacity-60' : 'hover:border-primary/70'}`}
                  >
                    {preview ? (
                      <Image src={preview} alt="Logo preview" width={200} height={120} className="object-contain rounded-md" />
                    ) : (
                      <UploadIcon />
                    )}
                    <Input {...getInputProps()} disabled={isLoading} />
                    <p className="mt-2 text-sm text-gray-600">
                      {isDragActive ? "Drop the logo here!" : "Drag & drop or click to select a file"}
                    </p>
                    <p className="text-xs text-gray-500">PNG or JPG (Max 5MB)</p>
                  </div>
                </FormControl>
                <FormMessage>
                  {fileRejections.length > 0 && "Invalid file. Please check size and type."}
                </FormMessage>
              </FormItem>
            )}
          />

          {/* Action Buttons */}
          <div className="flex justify-end gap-4 pt-4">
            <Button type="button" variant="outline" size="xl" onClick={setClose} disabled={isLoading}>
              Cancel
            </Button>
            <Button type="submit" variant="warning" size="xl" disabled={isLoading}>
              {isLoading ? "Creating..." : "Create Manufacturer"}
            </Button>
          </div>
        </form>
      </Form>
    </div>
  );
};

export default AddManufacturer; 


implement similar flow for the create product to to work

const adminCreateProduct = async (req, res) => {
  try {
    const { name, description, categoryId, manufacturerId, options, type } = req.body;

    // Validate required fields
    const requiredFields = ['name', 'description', 'categoryId', 'manufacturerId', 'options'];
    const missingFields = requiredFields.filter(field => !req.body[field]);

    if (missingFields.length > 0) {
      return res.status(400).json({ 
        error: 'Missing required fields',
        missingFields
      });
    }

    // Validate options array
    if (!Array.isArray(options) || options.length === 0) {
      return res.status(400).json({ 
        error: 'At least one product option is required' 
      });
    }

    // Verify category and manufacturer exist
    const [category, manufacturer] = await Promise.all([
      prisma.category.findUnique({ where: { id: parseInt(categoryId) } }),
      prisma.manufacturer.findUnique({ where: { id: parseInt(manufacturerId) } })
    ]);

    if (!category) {
      return res.status(404).json({ error: 'Category not found' });
    }

    if (!manufacturer) {
      return res.status(404).json({ error: 'Manufacturer not found' });
    }

    // Create product with processed options
    const product = await prisma.product.create({
      data: {
        name,
        description,
        type: type || 'platform',
        category: { connect: { id: parseInt(categoryId) } },
        manufacturer: { connect: { id: parseInt(manufacturerId) } },
        options: { create: processOptions(options) }
      },
      include: {
        category: true,
        manufacturer: true,
        options: true
      }
    });

    // Add price and stock summary
    const productWithSummary = addProductSummary([product])[0];

    return res.status(201).json({
      success: true,
      message: 'Product created successfully',
      data: productWithSummary
    });

  } catch (error) {
    console.error('Error creating product:', error);
    return res.status(500).json({ 
      error: 'Failed to create product',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};


"use client";

import AddProduct from "./components/product-details";
import AddPricing from "./components/pricing";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Form } from "@/components/ui/form";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import axios from 'axios';
import { Storage } from '@/lib/utils';
import { useRouter } from "next/navigation";

const apiClient = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || '/api',
});

// Add token refresh mechanism
const refreshTokens = async () => {
  try {
    const response = await axios.post('/api/auth/refresh');
    Storage.set('token', response.data.accessToken);
    return response.data.accessToken;
  } catch (error) {
    console.error('Token refresh failed:', error);
    throw error;
  }
};

// Request interceptor
apiClient.interceptors.request.use(
  (config) => {
    const token = Storage.get('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Response interceptor for token refresh
apiClient.interceptors.response.use(
  response => response,
  async error => {
    const originalRequest = error.config;
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        const newToken = await refreshTokens();
        originalRequest.headers.Authorization = `Bearer ${newToken}`;
        return apiClient(originalRequest);
      } catch (refreshError) {
        return Promise.reject(refreshError);
      }
    }
    return Promise.reject(error);
  }
);

export type ProductOption = {
  name: string;
  value: string;
  image?: string[];
  inventory: number;
  stockPrice: number;
  markupType: "PERCENTAGE" | "FIXED";
  markupValue: number;
  sellingPrice: number;
  weight: number;
  unit: string;
  moq: number;
};

export type ProductFormValues = {
  name: string;
  description: string;
  categoryId: string;
  manufacturerId: string;
  options: ProductOption[];
  type?: string;
};

export default function AddProductsPage() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState<"add-product" | "add-pricing">("add-product");
  const [isSubmitting, setIsSubmitting] = useState(false);

  const formSchema = z.object({
    name: z.string(),
    description: z.string(),
    categoryId: z.string(),
    manufacturerId: z.string(),
    options: z.array(
      z.object({
        name: z.string(),
        value: z.string(),
        inventory: z.number(),
        stockPrice: z.number(),
        markupType: z.enum(["PERCENTAGE", "FIXED"]),
        markupValue: z.number(),
        sellingPrice: z.number(),
        weight: z.number(),
        unit: z.string(),
        moq: z.number(),
      })
    ),
  });

  type FormSchemaType = z.infer<typeof formSchema>;

  const form = useForm<FormSchemaType>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      description: "",
      categoryId: "",
      manufacturerId: "",
      options: [
        {
          name: "",
          value: "",
          inventory: 0,
          stockPrice: 0,
          markupType: "PERCENTAGE",
          markupValue: 0,
          sellingPrice: 0,
          weight: 0,
          unit: "",
          moq: 1,
        },
      ],
    },
  });

  const handleFinalSubmit = async (values: FormSchemaType) => {
    setIsSubmitting(true);
    try {
      const payload = {
        ...values,
        categoryId: parseInt(values.categoryId),
        manufacturerId: parseInt(values.manufacturerId),
        type: "platform",
        criticalLevel: 5,    // Default value
        targetLevel: 50,     // Default value
        stockAlert: false,   // Default value
        options: values.options.map(option => ({
          ...option,
          image: [],  // Default empty image array
          price: option.sellingPrice,  // Add price field
          lowStockThreshold: 5  // Default value
        })),
      };

      const response = await apiClient.post("/admin/products", payload);

      if (response.data.success) {
        toast.success("Product created successfully");
        form.reset();
        router.push("/admin/products");
      } else {
        throw new Error(response.data.error || "Failed to create product");
      }
    } catch (error: any) {
      console.error("Creation failed:", error);
      
      let errorMessage = "Failed to create product";
      if (error.response) {
        if (error.response.status === 401) {
          errorMessage = "Session expired. Please log in again.";
        } else if (error.response.data?.error) {
          errorMessage = error.response.data.error;
        } else if (error.response.data?.message) {
          errorMessage = error.response.data.message;
        }
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      toast.error(errorMessage);
    } finally {
      setIsSubmitting(false);
    }
  };

  const onSubmit = async () => {
    const isValid = await form.trigger();
    if (!isValid) return;

    if (activeTab === "add-product") {
      setActiveTab("add-pricing");
    } else {
      await handleFinalSubmit(form.getValues());
    }
  };

  return (
    <section>
      <Form {...form}>
        <form
          onSubmit={(e) => {
            e.preventDefault();
            onSubmit();
          }}
          className="mb-8 mt-6"
        >
          {activeTab === "add-pricing" ? (
            <AddPricing form={form} />
          ) : (
            <AddProduct form={form} />
          )}

          <div className="flex justify-end gap-5 mt-8">
            {activeTab === "add-pricing" && (
              <Button
                variant="outline"
                type="button"
                className="w-auto py-4 px-[3rem] font-bold text-base"
                size="xl"
                onClick={() => setActiveTab("add-product")}
                disabled={isSubmitting}
              >
                Back
              </Button>
            )}
            <Button
              type="submit"
              variant="warning"
              className="w-auto px-[3rem] py-4 font-bold text-base"
              size="xl"
              disabled={isSubmitting}
            >
              {isSubmitting ? "Processing..." : 
                activeTab === "add-product" ? "Next" : "Create Product"}
            </Button>
          </div>
        </form>
      </Form>
    </section>
  );
}

"use client";

import { FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import Header from "@/app/(admin)/components/header";
import { UseFormReturn } from "react-hook-form";
import { Plus, Trash } from "lucide-react";
import { useEffect } from "react";

interface iProps {
  form: UseFormReturn<any>;
}

const AddPricing: React.FC<iProps> = ({ form }) => {
  const { control, getValues, setValue, formState } = form;
  const options = form.watch("options") || [];

  const addOption = () => {
    setValue("options", [
      ...options,
      {
        name: "",
        value: "",
        inventory: 0,
        stockPrice: 0,
        markupType: "PERCENTAGE",
        markupValue: 0,
        sellingPrice: 0,
        weight: 0,
        unit: "",
        moq: 1,
      },
    ]);
  };

  const removeOption = (index: number) => {
    if (options.length <= 1) return;
    const newOptions = [...options];
    newOptions.splice(index, 1);
    setValue("options", newOptions);
  };

  const calculateSellingPrice = (index: number) => {
    const option = options[index];
    if (!option) return;

    let sellingPrice = 0;
    if (option.markupType === "PERCENTAGE") {
      sellingPrice = option.stockPrice * (1 + option.markupValue / 100);
    } else {
      sellingPrice = option.stockPrice + option.markupValue;
    }

    setValue(`options.${index}.sellingPrice`, Number(sellingPrice.toFixed(2)));
  };

  // Recalculate selling prices when form values change
  useEffect(() => {
    options.forEach((_:any, index:any) => {
      calculateSellingPrice(index);
    });
  }, [formState]);

  return (
    <div>
      <Header
        title="Pricing & Inventory"
        subtext="Configure product options and pricing"
      />

      {options.map((_:any, index:any) => (
        <div key={index} className="mb-8 p-4 border rounded-lg">
          <div className="flex justify-between items-center mb-4">
            <h3 className="font-medium">Option #{index + 1}</h3>
            {options.length > 1 && (
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeOption(index)}
              >
                <Trash size={16} />
              </Button>
            )}
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <FormField
              control={control}
              name={`options.${index}.name`}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Option Name</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Size, Color" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={control}
              name={`options.${index}.value`}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Option Value</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Large, 50KG" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <FormField
              control={control}
              name={`options.${index}.unit`}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Unit</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Bag, Kg" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={control}
              name={`options.${index}.weight`}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Weight (kg)</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      min="0.1"
                      step="0.1"
                      value={field.value}
                      onChange={(e) => {
                        const val = parseFloat(e.target.value) || 0;
                        field.onChange(val);
                      }}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={control}
              name={`options.${index}.moq`}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>MOQ (Minimum Order)</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      min="1"
                      value={field.value}
                      onChange={(e) => {
                        const val = parseInt(e.target.value) || 1;
                        field.onChange(val);
                      }}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
            <FormField
              control={control}
              name={`options.${index}.stockPrice`}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Cost Price (₦)</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      min="0"
                      step="0.01"
                      value={field.value}
                      onChange={(e) => {
                        const value = parseFloat(e.target.value) || 0;
                        field.onChange(value);
                        calculateSellingPrice(index);
                      }}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={control}
              name={`options.${index}.markupType`}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Markup Type</FormLabel>
                  <FormControl>
                    <select
                      className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                      value={field.value}
                      onChange={(e) => {
                        field.onChange(e.target.value);
                        calculateSellingPrice(index);
                      }}
                    >
                      <option value="PERCENTAGE">Percentage</option>
                      <option value="FIXED">Fixed Amount</option>
                    </select>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={control}
              name={`options.${index}.markupValue`}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>
                    {getValues(`options.${index}.markupType`) === "PERCENTAGE"
                      ? "Markup %"
                      : "Markup Amount (₦)"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      min="0"
                      step="0.01"
                      value={field.value}
                      onChange={(e) => {
                        const value = parseFloat(e.target.value) || 0;
                        field.onChange(value);
                        calculateSellingPrice(index);
                      }}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={control}
              name={`options.${index}.sellingPrice`}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Selling Price (₦)</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      min="0.01"
                      step="0.01"
                      value={field.value}
                      readOnly
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <FormField
            control={control}
            name={`options.${index}.inventory`}
            render={({ field }) => (
              <FormItem className="w-full md:w-1/2">
                <FormLabel>Inventory Quantity</FormLabel>
                <FormControl>
                  <Input
                    type="number"
                    min="0"
                    value={field.value}
                    onChange={(e) => {
                      field.onChange(parseInt(e.target.value) || 0);
                    }}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
      ))}

      <Button
        type="button"
        variant="outline"
        className="mt-4"
        onClick={addOption}
      >
        <Plus size={16} className="mr-2" />
        Add Product Option
      </Button>
    </div>
  );
};

export default AddPricing;

"use client";

import { FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import Header from "@/app/(admin)/components/header";
import { UseFormReturn } from "react-hook-form";
import { useGetManufacturers } from "@/services/manufacturers";
import { useEffect } from "react";

interface iProps {
  form: UseFormReturn<any>;
}

const AddProduct: React.FC<iProps> = ({ form }) => {
  const {
    getManufacturersData,
    getManufacturersIsLoading,
  } = useGetManufacturers();

  const categories = [
    { id: "1", name: "Dry Staples & Grains" },
    { id: "2", name: "Spices & Seasonings" },
    { id: "3", name: "Oils & Fats" },
  ];

  // Set default manufacturer if available
  useEffect(() => {
    if (getManufacturersData?.data?.length > 0 && !form.getValues("manufacturerId")) {
      form.setValue("manufacturerId", getManufacturersData.data[0].id.toString());
    }
  }, [getManufacturersData, form]);

  return (
    <div>
      <Header
        title="Add product"
        subtext="Tell your buyers all they need to know about this product"
      />

      <div className="my-6">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Product Name</FormLabel>
              <FormControl>
                <Input
                  type="text"
                  placeholder="Premium Quality Rice"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>

      <div className="flex gap-6 mb-6">
        <FormField
          control={form.control}
          name="manufacturerId"
          render={({ field }) => (
            <FormItem className="w-full">
              <FormLabel>Manufacturer</FormLabel>
              <Select 
                onValueChange={field.onChange} 
                value={field.value}
                disabled={getManufacturersIsLoading}
              >
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select manufacturer" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {getManufacturersIsLoading ? (
                    <SelectItem value="select">Loading manufacturers...</SelectItem>
                  ) : (
                    getManufacturersData?.data?.map((manu:any) => (
                      <SelectItem key={manu.id} value={manu.id.toString()}>
                        {manu.name}
                      </SelectItem>
                    ))
                  )}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="categoryId"
          render={({ field }) => (
            <FormItem className="w-full">
              <FormLabel>Product Category</FormLabel>
              <Select onValueChange={field.onChange} value={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select category" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {categories.map((cat) => (
                    <SelectItem key={cat.id} value={cat.id}>
                      {cat.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>

      <div className="mb-6">
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="Detailed product description..."
                  className="min-h-[120px]"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>
    </div>
  );
};

export default AddProduct;

implement it into this flow by following the create manufacturer flow 

manufacturers data set {
  "message": "Manufacturers retrieved successfully",
  "data": [
      {
          "id": 25,
          "name": "BUA FOODS 12345 !@#$%^&*",
          "country": "Nigeria",
          "createdAt": "2025-07-12T15:01:47.346Z",
          "updatedAt": "2025-07-12T15:52:41.691Z",
          "logo": "https://res.cloudinary.com/dsj9phqyk/image/upload/v1752332505/manufacturers/rj2hxjb5bruvhucqj8zz.jpg",
          "contactPerson": "James Bond 123 !@#$%^&",
          "email": "kingsley.okosodo14+Manufacturer01@gmail.com",
          "phone": "astyduty2132445365#@$#%$^%&^",
          "status": true,
          "_count": {
              "products": 0
          }
      },
      {
          "id": 4,
          "name": "Green Harvest Industries",
          "country": "Nigeria",
          "createdAt": "2025-05-21T14:50:46.485Z",
          "updatedAt": "2025-05-21T14:50:46.485Z",
          "logo": "https://res.cloudinary.com/dersoiltc/image/upload/v1744729986/WhatsApp_Image_2025-04-15_at_11.49.37_1_ucnbny.jpg",
          "contactPerson": "Mr Juew",
          "email": "contact@greenharvestng.com",
          "phone": "08121998731",
          "status": true,
          "_count": {
              "products": 6
          }
      },
      {
          "id": 11,
          "name": "Heritage Foods Nigeria",
          "country": "Nigeria",
          "createdAt": "2025-05-21T14:50:48.796Z",
          "updatedAt": "2025-05-21T14:50:48.796Z",
          "logo": "https://res.cloudinary.com/dersoiltc/image/upload/v1744729986/WhatsApp_Image_2025-04-15_at_11.49.36_bwo9rc.jpg",
          "contactPerson": "Mr juwon",
          "email": "info@heritagefoods.com.ng",
          "phone": "08136778523",
          "status": true,
          "_count": {
              "products": 5
          }
      },
      {
          "id": 6,
          "name": "Lagos Agro Products",
          "country": "Nigeria",
          "createdAt": "2025-05-21T14:50:47.157Z",
          "updatedAt": "2025-05-21T14:50:47.157Z",
          "logo": "https://res.cloudinary.com/dersoiltc/image/upload/v1744729986/WhatsApp_Image_2025-04-15_at_11.49.36_bwo9rc.jpg",
          "contactPerson": "Mr Alik",
          "email": "info@lagosagro.com",
          "phone": "08147555764",
          "status": true,
          "_count": {
              "products": 5
          }
      },
      {
          "id": 24,
          "name": "mohammed",
          "country": "Nigeria",
          "createdAt": "2025-07-10T03:02:54.763Z",
          "updatedAt": "2025-07-11T05:02:14.482Z",
          "logo": "https://res.cloudinary.com/dsj9phqyk/image/upload/v1752166200/manufacturers/lnrnzy2axipucmatfhb5.png",
          "contactPerson": "Jemeel",
          "email": "adeolaamisu66@gmail.com",
          "phone": "09012902746",
          "status": true,
          "_count": {
              "products": 1
          }
      },
      {
          "id": 3,
          "name": "Naija Foods Ltd.",
          "country": "Nigeria",
          "createdAt": "2025-05-21T14:50:46.169Z",
          "updatedAt": "2025-05-21T14:50:46.169Z",
          "logo": "https://res.cloudinary.com/dersoiltc/image/upload/v1744729986/WhatsApp_Image_2025-04-15_at_11.49.36_1_okewbz.jpg",
          "contactPerson": "Mr Fope",
          "email": "info@naijfoods.com",
          "phone": "08121998731",
          "status": true,
          "_count": {
              "products": 2
          }
      },
      {
          "id": 10,
          "name": "Nestle",
          "country": "Nigeria",
          "createdAt": "2025-05-21T14:50:48.481Z",
          "updatedAt": "2025-07-10T14:40:40.894Z",
          "logo": "https://res.cloudinary.com/dersoiltc/image/upload/v1744729986/WhatsApp_Image_2025-04-15_at_11.49.37_tokziq.jpg",
          "contactPerson": "Miss Bimp",
          "email": "deluxxisempire@gmail.com",
          "phone": "09012902740",
          "status": true,
          "_count": {
              "products": 4
          }
      },
      {
          "id": 8,
          "name": "Nigerian Bulk Imports",
          "country": "Nigeria",
          "createdAt": "2025-05-21T14:50:47.820Z",
          "updatedAt": "2025-07-09T07:46:50.781Z",
          "logo": "https://res.cloudinary.com/dersoiltc/image/upload/v1744729986/WhatsApp_Image_2025-04-15_at_11.49.36_1_okewbz.jpg",
          "contactPerson": "Miss Joy",
          "email": "import@nbimports.com",
          "phone": "08147555764",
          "status": true,
          "_count": {
              "products": 0
          }
      },
      {
          "id": 23,
          "name": "SlocMason",
          "country": "Afghanistan",
          "createdAt": "2025-07-09T08:35:52.891Z",
          "updatedAt": "2025-07-10T16:42:41.296Z",
          "logo": "https://res.cloudinary.com/dsj9phqyk/image/upload/v1752165759/manufacturers/imd4idvoy8aooh3bk5gf.jpg",
          "contactPerson": "man",
          "email": "slocmason@gmail.com",
          "phone": "+2347019923947",
          "status": true,
          "_count": {
              "products": 0
          }
      },
      {
          "id": 7,
          "name": "Tobi",
          "country": "Nigeria",
          "createdAt": "2025-05-21T14:50:47.483Z",
          "updatedAt": "2025-07-11T05:07:42.533Z",
          "logo": "https://res.cloudinary.com/dersoiltc/image/upload/v1744729987/WhatsApp_Image_2025-04-15_at_11.49.36_2_jpdrol.jpg",
          "contactPerson": "Kingsley",
          "email": "info@dangoteessentials.com",
          "phone": "08147555711",
          "status": true,
          "_count": {
              "products": 1
          }
      }
  ],
  "pagination": {
      "currentPage": 1,
      "pageSize": 10,
      "totalItems": 11,
      "totalPages": 2,
      "hasNextPage": true,
      "hasPreviousPage": false
  }
} 
